{
  "version": 3,
  "sources": ["../../focus-trap/index.js", "../../focus-trap-react/dist/focus-trap-react.js"],
  "sourcesContent": ["import {\n  tabbable,\n  focusable,\n  isFocusable,\n  isTabbable,\n  getTabIndex,\n} from 'tabbable';\n\nconst activeFocusTraps = {\n  activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      const activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap._setPausedState(true);\n      }\n    }\n\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n\n  deactivateTrap(trapStack, trap) {\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (\n      trapStack.length > 0 &&\n      !trapStack[trapStack.length - 1]._isManuallyPaused()\n    ) {\n      trapStack[trapStack.length - 1]._setPausedState(false);\n    }\n  },\n};\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e?.key === 'Escape' || e?.key === 'Esc' || e?.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e?.key === 'Tab' || e?.keyCode === 9;\n};\n\n// checks for TAB by default\nconst isKeyForward = function (e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nconst isKeyBackward = function (e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nconst internalTrapStack = [];\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const trapStack = userOptions?.trapStack || internalTrapStack;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward,\n    isKeyBackward,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    manuallyPaused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element, event) {\n    const composedPath =\n      typeof event?.composedPath === 'function'\n        ? event.composedPath()\n        : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        composedPath?.includes(container) ||\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @param {Object} options\n   * @param {boolean} [options.hasFallback] True if the option could be a selector string\n   *  and the option allows for a fallback scenario in the case where the selector is\n   *  valid but does not match a node (i.e. the queried node doesn't exist in the DOM).\n   * @param {Array} [options.params] Params to pass to the option if it's a function.\n   * @returns {undefined | null | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `null` if the option didn't resolve\n   *  to a node but `options.hasFallback=true`, `false` if the option resolved to `false`\n   *  (node explicitly not given); otherwise, the resolved DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node, unless the option is a selector string and `options.hasFallback=true`.\n   */\n  const getNodeForOption = function (\n    optionName,\n    { hasFallback = false, params = [] } = {}\n  ) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      try {\n        node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      } catch (err) {\n        throw new Error(\n          `\\`${optionName}\\` appears to be an invalid selector; error=\"${err.message}\"`\n        );\n      }\n\n      if (!node) {\n        if (!hasFallback) {\n          throw new Error(\n            `\\`${optionName}\\` as selector refers to no known node`\n          );\n        }\n        // else, `node` MUST be `null` because that's what `Document.querySelector()` returns\n        //  if the selector is valid but doesn't match anything\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus', { hasFallback: true });\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (\n      node === undefined ||\n      (node && !isFocusable(node, config.tabbableOptions))\n    ) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    } else if (node === null) {\n      // option is a VALID selector string that doesn't yield a node: use the `fallbackFocus`\n      //  option instead of the default behavior when the option isn't specified at all\n      node = getNodeForOption('fallbackFocus');\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      const firstTabbableNode =\n        tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      const lastTabbableNode =\n        tabbableNodes.length > 0\n          ? tabbableNodes[tabbableNodes.length - 1]\n          : undefined;\n\n      const firstDomTabbableNode = focusableNodes.find((node) =>\n        isTabbable(node)\n      );\n      const lastDomTabbableNode = focusableNodes\n        .slice()\n        .reverse()\n        .find((node) => isTabbable(node));\n\n      const posTabIndexesFound = !!tabbableNodes.find(\n        (node) => getTabIndex(node) > 0\n      );\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound,\n\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode,\n\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          const nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes\n                .slice(focusableNodes.indexOf(node) + 1)\n                .find((el) => isTabbable(el));\n            }\n\n            return focusableNodes\n              .slice(0, focusableNodes.indexOf(node))\n              .reverse()\n              .find((el) => isTabbable(el));\n          }\n\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (\n      state.containerGroups.find((g) => g.posTabIndexesFound) &&\n      state.containerGroups.length > 1\n    ) {\n      throw new Error(\n        \"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\"\n      );\n    }\n  };\n\n  /**\n   * Gets the current activeElement. If it's a web-component and has open shadow-root\n   * it will recursively search inside shadow roots for the \"true\" activeElement.\n   *\n   * @param {Document | ShadowRoot} el\n   *\n   * @returns {HTMLElement} The element that currently has the focus\n   **/\n  const getActiveElement = function (el) {\n    const activeElement = el.activeElement;\n\n    if (!activeElement) {\n      return;\n    }\n\n    if (\n      activeElement.shadowRoot &&\n      activeElement.shadowRoot.activeElement !== null\n    ) {\n      return getActiveElement(activeElement.shadowRoot);\n    }\n\n    return activeElement;\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === getActiveElement(document)) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', {\n      params: [previousActiveElement],\n    });\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  const findNextNavNode = function ({ target, event, isBackward = false }) {\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target, event);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = state.tabbableGroups.findIndex(\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.lastTabbableNode\n              : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = state.tabbableGroups.findIndex(\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.firstTabbableNode\n              : destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate,\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  const checkFocusIn = function (event) {\n    const target = getActualTarget(event);\n    const targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      let nextNode; // next node to focus, if we find one\n      let navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          const mruContainerIdx = findContainerIndex(\n            state.mostRecentlyFocusedNode\n          );\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          const { tabbableNodes } = state.containerGroups[mruContainerIdx];\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            const mruTabIdx = tabbableNodes.findIndex(\n              (node) => node === state.mostRecentlyFocusedNode\n            );\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (\n            !state.containerGroups.some((g) =>\n              g.tabbableNodes.some((n) => getTabIndex(n) > 0)\n            )\n          ) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent),\n        });\n      }\n\n      if (nextNode) {\n        tryFocus(nextNode);\n      } else {\n        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkKeyNav = function (event, isBackward = false) {\n    state.recentNavEvent = event;\n\n    const destinationNode = findNextNavNode({ event, isBackward });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkTabKey = function (event) {\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  // we use a different event phase for the Escape key to allow canceling the event and checking for this in escapeDeactivates\n  const checkEscapeKey = function (event) {\n    if (\n      isEscapeEvent(event) &&\n      valueOrHandler(config.escapeDeactivates, event) !== false\n    ) {\n      event.preventDefault();\n      trap.deactivate();\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkTabKey, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkEscapeKey);\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkTabKey, true);\n    doc.removeEventListener('keydown', checkEscapeKey);\n\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  const checkDomRemoval = function (mutations) {\n    const isFocusedNodeRemoved = mutations.some(function (mutation) {\n      const removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  const mutationObserver =\n    typeof window !== 'undefined' && 'MutationObserver' in window\n      ? new MutationObserver(checkDomRemoval)\n      : undefined;\n\n  const updateObservedNodes = function () {\n    if (!mutationObserver) {\n      return;\n    }\n\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true,\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = getActiveElement(doc);\n\n      onActivate?.();\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate?.();\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      onDeactivate?.();\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate?.();\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause(pauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      state.manuallyPaused = true;\n\n      return this._setPausedState(true, pauseOptions);\n    },\n\n    unpause(unpauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      state.manuallyPaused = false;\n\n      if (trapStack[trapStack.length - 1] !== this) {\n        return this;\n      }\n\n      return this._setPausedState(false, unpauseOptions);\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      updateObservedNodes();\n\n      return this;\n    },\n  };\n\n  Object.defineProperties(trap, {\n    _isManuallyPaused: {\n      value() {\n        return state.manuallyPaused;\n      },\n    },\n    _setPausedState: {\n      value(paused, options) {\n        if (state.paused === paused) {\n          return this;\n        }\n\n        state.paused = paused;\n        if (paused) {\n          const onPause = getOption(options, 'onPause');\n          const onPostPause = getOption(options, 'onPostPause');\n          onPause?.();\n\n          removeListeners();\n          updateObservedNodes();\n\n          onPostPause?.();\n        } else {\n          const onUnpause = getOption(options, 'onUnpause');\n          const onPostUnpause = getOption(options, 'onPostUnpause');\n\n          onUnpause?.();\n\n          updateTabbableNodes();\n          addListeners();\n          updateObservedNodes();\n\n          onPostUnpause?.();\n        }\n\n        return this;\n      },\n    },\n  });\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n", "\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar _exec$, _exec;\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar React = require('react');\nvar _require = require('focus-trap'),\n  createFocusTrap = _require.createFocusTrap;\nvar _require2 = require('tabbable'),\n  isFocusable = _require2.isFocusable;\n\n/**\n * The major version of React currently running.\n * @type {number}\n */\nvar reactVerMajor = parseInt((_exec$ = (_exec = /^(\\d+)\\./.exec(React.version)) === null || _exec === void 0 ? void 0 : _exec[1]) !== null && _exec$ !== void 0 ? _exec$ : 0, 10);\n\n/**\n * @type {import('../index.d.ts').FocusTrap}\n */\nvar FocusTrap = /*#__PURE__*/function (_React$Component) {\n  function FocusTrap(props) {\n    var _this;\n    _classCallCheck(this, FocusTrap);\n    _this = _callSuper(this, FocusTrap, [props]);\n    /**\n     * Gets the node for the given option, which is expected to be an option that\n     *  can be either a DOM node, a string that is a selector to get a node, `false`\n     *  (if a node is explicitly NOT given), or a function that returns any of these\n     *  values.\n     * @param {string} optionName\n     * @returns {undefined | false | HTMLElement | SVGElement} Returns\n     *  `undefined` if the option is not specified; `false` if the option\n     *  resolved to `false` (node explicitly not given); otherwise, the resolved\n     *  DOM node.\n     * @throws {Error} If the option is set, not `false`, and is not, or does not\n     *  resolve to a node.\n     */\n    _defineProperty(_this, \"getNodeForOption\", function (optionName) {\n      var _this$internalOptions;\n      // use internal options first, falling back to original options\n      var optionValue = (_this$internalOptions = this.internalOptions[optionName]) !== null && _this$internalOptions !== void 0 ? _this$internalOptions : this.originalOptions[optionName];\n      if (typeof optionValue === 'function') {\n        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          params[_key - 1] = arguments[_key];\n        }\n        optionValue = optionValue.apply(void 0, params);\n      }\n      if (optionValue === true) {\n        optionValue = undefined; // use default value\n      }\n      if (!optionValue) {\n        if (optionValue === undefined || optionValue === false) {\n          return optionValue;\n        }\n        // else, empty string (invalid), null (invalid), 0 (invalid)\n\n        throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n      }\n      var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n      if (typeof optionValue === 'string') {\n        var _this$getDocument;\n        node = (_this$getDocument = this.getDocument()) === null || _this$getDocument === void 0 ? void 0 : _this$getDocument.querySelector(optionValue); // resolve to node, or null if fails\n        if (!node) {\n          throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n        }\n      }\n      return node;\n    });\n    _this.handleDeactivate = _this.handleDeactivate.bind(_this);\n    _this.handlePostDeactivate = _this.handlePostDeactivate.bind(_this);\n    _this.handleClickOutsideDeactivates = _this.handleClickOutsideDeactivates.bind(_this);\n\n    // focus-trap options used internally when creating the trap\n    _this.internalOptions = {\n      // We need to hijack the returnFocusOnDeactivate option,\n      // because React can move focus into the element before we arrived at\n      // this lifecycle hook (e.g. with autoFocus inputs). So the component\n      // captures the previouslyFocusedElement in componentWillMount,\n      // then (optionally) returns focus to it in componentWillUnmount.\n      returnFocusOnDeactivate: false,\n      // the rest of these are also related to deactivation of the trap, and we\n      //  need to use them and control them as well\n      checkCanReturnFocus: null,\n      onDeactivate: _this.handleDeactivate,\n      onPostDeactivate: _this.handlePostDeactivate,\n      // we need to special-case this setting as well so that we can know if we should\n      //  NOT return focus if the trap gets auto-deactivated as the result of an\n      //  outside click (otherwise, we'll always think we should return focus because\n      //  of how we manage that flag internally here)\n      clickOutsideDeactivates: _this.handleClickOutsideDeactivates\n    };\n\n    // original options provided by the consumer\n    _this.originalOptions = {\n      // because of the above `internalOptions`, we maintain our own flag for\n      //  this option, and default it to `true` because that's focus-trap's default\n      returnFocusOnDeactivate: true,\n      // because of the above `internalOptions`, we keep these separate since\n      //  they're part of the deactivation process which we configure (internally) to\n      //  be shared between focus-trap and focus-trap-react\n      onDeactivate: null,\n      onPostDeactivate: null,\n      checkCanReturnFocus: null,\n      // the user's setting, defaulted to false since focus-trap defaults this to false\n      clickOutsideDeactivates: false\n    };\n    var focusTrapOptions = props.focusTrapOptions;\n    for (var optionName in focusTrapOptions) {\n      if (!Object.prototype.hasOwnProperty.call(focusTrapOptions, optionName)) {\n        continue;\n      }\n      if (optionName === 'returnFocusOnDeactivate' || optionName === 'onDeactivate' || optionName === 'onPostDeactivate' || optionName === 'checkCanReturnFocus' || optionName === 'clickOutsideDeactivates') {\n        _this.originalOptions[optionName] = focusTrapOptions[optionName];\n        continue; // exclude from internalOptions\n      }\n      _this.internalOptions[optionName] = focusTrapOptions[optionName];\n    }\n\n    // if set, `{ target: Node, allowDeactivation: boolean }` where `target` is the outside\n    //  node that was clicked, and `allowDeactivation` is the result of the consumer's\n    //  option (stored in `this.originalOptions.clickOutsideDeactivates`, which may be a\n    //  function) whether to allow or deny auto-deactivation on click on this outside node\n    _this.outsideClick = null;\n\n    // elements from which to create the focus trap on mount; if a child is used\n    //  instead of the `containerElements` prop, we'll get the child's related\n    //  element when the trap renders and then is declared 'mounted'\n    _this.focusTrapElements = props.containerElements || [];\n\n    // now we remember what the currently focused element is, not relying on focus-trap\n    _this.updatePreviousElement();\n    return _this;\n  }\n\n  /**\n   * Gets the configured document.\n   * @returns {Document|undefined} Configured document, falling back to the main\n   *  document, if it exists. During SSR, `undefined` is returned since the\n   *  document doesn't exist.\n   */\n  _inherits(FocusTrap, _React$Component);\n  return _createClass(FocusTrap, [{\n    key: \"getDocument\",\n    value: function getDocument() {\n      // SSR: careful to check if `document` exists before accessing it as a variable\n      return this.props.focusTrapOptions.document || (typeof document !== 'undefined' ? document : undefined);\n    }\n  }, {\n    key: \"getReturnFocusNode\",\n    value: function getReturnFocusNode() {\n      var node = this.getNodeForOption('setReturnFocus', this.previouslyFocusedElement);\n      return node ? node : node === false ? false : this.previouslyFocusedElement;\n    }\n\n    /** Update the previously focused element with the currently focused element. */\n  }, {\n    key: \"updatePreviousElement\",\n    value: function updatePreviousElement() {\n      var currentDocument = this.getDocument();\n      if (currentDocument) {\n        this.previouslyFocusedElement = currentDocument.activeElement;\n      }\n    }\n  }, {\n    key: \"deactivateTrap\",\n    value: function deactivateTrap() {\n      // NOTE: it's possible the focus trap has already been deactivated without our knowing it,\n      //  especially if the user set the `clickOutsideDeactivates: true` option on the trap,\n      //  and the mouse was clicked on some element outside the trap; at that point, focus-trap\n      //  will initiate its auto-deactivation process, which will call our own\n      //  handleDeactivate(), which will call into this method\n      if (!this.focusTrap || !this.focusTrap.active) {\n        return;\n      }\n      this.focusTrap.deactivate({\n        // NOTE: we never let the trap return the focus since we do that ourselves\n        returnFocus: false,\n        // we'll call this in our own post deactivate handler so make sure the trap doesn't\n        //  do it prematurely\n        checkCanReturnFocus: null,\n        // let it call the user's original deactivate handler, if any, instead of\n        //  our own which calls back into this function\n        onDeactivate: this.originalOptions.onDeactivate\n        // NOTE: for post deactivate, don't specify anything so that it calls the\n        //  onPostDeactivate handler specified on `this.internalOptions`\n        //  which will always be our own `handlePostDeactivate()` handler, which\n        //  will finish things off by calling the user's provided onPostDeactivate\n        //  handler, if any, at the right time\n        // onPostDeactivate: NOTHING\n      });\n    }\n  }, {\n    key: \"handleClickOutsideDeactivates\",\n    value: function handleClickOutsideDeactivates(event) {\n      // use consumer's option (or call their handler) as the permission or denial\n      var allowDeactivation = typeof this.originalOptions.clickOutsideDeactivates === 'function' ? this.originalOptions.clickOutsideDeactivates.call(null, event) // call out of context\n      : this.originalOptions.clickOutsideDeactivates; // boolean\n\n      if (allowDeactivation) {\n        // capture the outside target that was clicked so we can use it in the deactivation\n        //  process since the consumer allowed it to cause auto-deactivation\n        this.outsideClick = {\n          target: event.target,\n          allowDeactivation: allowDeactivation\n        };\n      }\n      return allowDeactivation;\n    }\n  }, {\n    key: \"handleDeactivate\",\n    value: function handleDeactivate() {\n      if (this.originalOptions.onDeactivate) {\n        this.originalOptions.onDeactivate.call(null); // call user's handler out of context\n      }\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"handlePostDeactivate\",\n    value: function handlePostDeactivate() {\n      var _this2 = this;\n      var finishDeactivation = function finishDeactivation() {\n        var returnFocusNode = _this2.getReturnFocusNode();\n        var canReturnFocus = !!(\n        // did the consumer allow it?\n\n        _this2.originalOptions.returnFocusOnDeactivate && // can we actually focus the node?\n        returnFocusNode !== null && returnFocusNode !== void 0 && returnFocusNode.focus && (\n        // was there an outside click that allowed deactivation?\n        !_this2.outsideClick ||\n        // did the consumer allow deactivation when the outside node was clicked?\n        _this2.outsideClick.allowDeactivation &&\n        // is the outside node NOT focusable (implying that it did NOT receive focus\n        //  as a result of the click-through) -- in which case do NOT restore focus\n        //  to `returnFocusNode` because focus should remain on the outside node\n        !isFocusable(_this2.outsideClick.target, _this2.internalOptions.tabbableOptions))\n\n        // if no, the restore focus to `returnFocusNode` at this point\n        );\n        var _this2$internalOption = _this2.internalOptions.preventScroll,\n          preventScroll = _this2$internalOption === void 0 ? false : _this2$internalOption;\n        if (canReturnFocus) {\n          // return focus to the element that had focus when the trap was activated\n          returnFocusNode.focus({\n            preventScroll: preventScroll\n          });\n        }\n        if (_this2.originalOptions.onPostDeactivate) {\n          _this2.originalOptions.onPostDeactivate.call(null); // don't call it in context of \"this\"\n        }\n        _this2.outsideClick = null; // reset: no longer needed\n      };\n      if (this.originalOptions.checkCanReturnFocus) {\n        this.originalOptions.checkCanReturnFocus.call(null, this.getReturnFocusNode()) // call out of context\n        .then(finishDeactivation, finishDeactivation);\n      } else {\n        finishDeactivation();\n      }\n    }\n  }, {\n    key: \"setupFocusTrap\",\n    value: function setupFocusTrap() {\n      if (this.focusTrap) {\n        // trap already exists: it's possible we're in StrictMode and we're being remounted,\n        //  in which case, we will have deactivated the trap when we got unmounted (remember,\n        //  StrictMode, in development, purposely unmounts and remounts components after\n        //  mounting them the first time to make sure they have reusable state,\n        //  @see https://reactjs.org/docs/strict-mode.html#ensuring-reusable-state) so now\n        //  we need to restore the state of the trap according to our component state\n        // NOTE: Strict mode __violates__ assumptions about the `componentWillUnmount()` API\n        //  which clearly states -- even for React 18 -- that, \"Once a component instance is\n        //  unmounted, __it will never be mounted again.__\" (emphasis ours). So when we get\n        //  unmounted, we assume we're gone forever and we deactivate the trap. But then\n        //  we get remounted and we're supposed to restore state. But if you had paused,\n        //  we've now deactivated (we don't know we're amount to get remounted again)\n        //  which means we need to reactivate and then pause. Otherwise, do nothing.\n        if (this.props.active && !this.focusTrap.active) {\n          this.focusTrap.activate();\n          if (this.props.paused) {\n            this.focusTrap.pause();\n          }\n        }\n      } else {\n        var nodesExist = this.focusTrapElements.some(Boolean);\n        if (nodesExist) {\n          this.focusTrap = this.props._createFocusTrap(this.focusTrapElements, this.internalOptions);\n          if (this.props.active) {\n            this.focusTrap.activate();\n          }\n          if (this.props.paused) {\n            this.focusTrap.pause();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.active) {\n        this.setupFocusTrap();\n      }\n      // else, wait for later activation in case the `focusTrapOptions` will be updated\n      //  again before the trap is activated (e.g. if waiting to know what the document\n      //  object will be, so the Trap must be rendered, but the consumer is waiting to\n      //  activate until they have obtained the document from a ref)\n      //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.focusTrap) {\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrap.updateContainerElements(this.props.containerElements);\n        }\n        var hasActivated = !prevProps.active && this.props.active;\n        var hasDeactivated = prevProps.active && !this.props.active;\n        var hasPaused = !prevProps.paused && this.props.paused;\n        var hasUnpaused = prevProps.paused && !this.props.paused;\n        if (hasActivated) {\n          this.updatePreviousElement();\n          this.focusTrap.activate();\n        }\n        if (hasDeactivated) {\n          this.deactivateTrap();\n          return; // un/pause does nothing on an inactive trap\n        }\n        if (hasPaused) {\n          this.focusTrap.pause();\n        }\n        if (hasUnpaused) {\n          this.focusTrap.unpause();\n        }\n      } else {\n        // NOTE: if we're in `componentDidUpdate` and we don't have a trap yet,\n        //  it either means it shouldn't be active, or it should be but none of\n        //  of given `containerElements` were present in the DOM the last time\n        //  we tried to create the trap\n\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrapElements = this.props.containerElements;\n        }\n\n        // don't create the trap unless it should be active in case the consumer\n        //  is still updating `focusTrapOptions`\n        //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n        if (this.props.active) {\n          this.updatePreviousElement();\n          this.setupFocusTrap();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var child = this.props.children ? React.Children.only(this.props.children) : undefined;\n      if (child) {\n        if (child.type && child.type === React.Fragment) {\n          throw new Error('A focus-trap cannot use a Fragment as its child container. Try replacing it with a <div> element.');\n        }\n        var callbackRef = function callbackRef(element) {\n          var containerElements = _this3.props.containerElements;\n          if (child) {\n            // React 19 moved the `ref` to an official prop\n            if (reactVerMajor >= 19) {\n              if (typeof child.props.ref === 'function') {\n                child.props.ref(element);\n              } else if (child.props.ref) {\n                child.props.ref.current = element;\n              }\n            } else {\n              // older versions of React had the `ref` separate from props (still works in R19\n              //  but results in a deprecation warning in Dev builds)\n              if (typeof child.ref === 'function') {\n                child.ref(element);\n              } else if (child.ref) {\n                child.ref.current = element;\n              }\n            }\n          }\n          _this3.focusTrapElements = containerElements ? containerElements : [element];\n        };\n        var childWithRef = React.cloneElement(child, {\n          ref: callbackRef\n        });\n        return childWithRef;\n      }\n      return null;\n    }\n  }]);\n}(React.Component); // NOTE: While React 19 REMOVED support for `propTypes`, support for `defaultProps`\n//  __for class components ONLY__ remains: \"Class components will continue to support\n//  defaultProps since there is no ES6 alternative.\"\n//  @see https://react.dev/blog/2024/04/25/react-19-upgrade-guide#removed-proptypes-and-defaultprops\nFocusTrap.defaultProps = {\n  active: true,\n  paused: false,\n  focusTrapOptions: {},\n  _createFocusTrap: createFocusTrap\n};\n\n// 🔺 DEPRECATED: default export\nmodule.exports = FocusTrap;\n\n// named export\nmodule.exports.FocusTrap = FocusTrap;"],
  "mappings": "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",
  "names": ["activeFocusTraps", "isSelectableInput", "isEscapeEvent", "isTabEvent", "isKeyForward", "isKeyBackward", "delay", "valueOrHandler", "getActualTarget", "internalTrapStack", "createFocusTrap", "activateTrap", "trapStack", "trap", "length", "activeTrap", "_setPausedState", "trapIndex", "indexOf", "push", "splice", "deactivateTrap", "_isManuallyPaused", "node", "tagName", "toLowerCase", "select", "e", "key", "keyCode", "shiftKey", "fn", "setTimeout", "value", "_len", "arguments", "params", "Array", "_key", "apply", "event", "target", "shadowRoot", "composedPath", "elements", "userOptions", "doc", "document", "config", "_objectSpread", "returnFocusOnDeactivate", "escapeDeactivates", "delayInitialFocus", "state", "containers", "containerGroups", "tabbableGroups", "nodeFocusedBeforeActivation", "mostRecentlyFocusedNode", "active", "paused", "manuallyPaused", "delayInitialFocusTimer", "undefined", "recentNavEvent", "getOption", "configOverrideOptions", "optionName", "configOptionName", "findContainerIndex", "element", "findIndex", "_ref", "container", "tabbableNodes", "contains", "includes", "find", "getNodeForOption", "_ref2", "_ref2$hasFallback", "hasFallback", "_ref2$params", "optionValue", "_toConsumableArray", "Error", "concat", "querySelector", "err", "message", "getInitialFocusNode", "isFocusable", "tabbableOptions", "activeElement", "firstTabbableGroup", "firstTabbableNode", "updateTabbableNodes", "map", "tabbable", "focusableNodes", "focusable", "lastTabbableNode", "firstDomTabbableNode", "isTabbable", "lastDomTabbableNode", "slice", "reverse", "posTabIndexesFound", "getTabIndex", "nextTabbableNode", "forward", "nodeIdx", "el", "filter", "group", "g", "getActiveElement", "tryFocus", "focus", "preventScroll", "getReturnFocusNode", "previousActiveElement", "findNextNavNode", "_ref3", "_ref3$isBackward", "isBackward", "destinationNode", "containerIndex", "containerGroup", "startOfGroupIndex", "_ref4", "destinationGroupIndex", "destinationGroup", "lastOfGroupIndex", "_ref5", "checkPointerDown", "clickOutsideDeactivates", "deactivate", "returnFocus", "allowOutsideClick", "preventDefault", "checkFocusIn", "targetContained", "Document", "stopImmediatePropagation", "nextNode", "navAcrossContainers", "mruContainerIdx", "mruTabIdx", "some", "n", "checkKeyNav", "checkTabKey", "checkEscapeKey", "checkClick", "addListeners", "addEventListener", "capture", "passive", "removeListeners", "removeEventListener", "checkDomRemoval", "mutations", "isFocusedNodeRemoved", "mutation", "removedNodes", "from", "mutationObserver", "window", "MutationObserver", "updateObservedNodes", "disconnect", "observe", "subtree", "childList", "activate", "activateOptions", "onActivate", "onPostActivate", "checkCanFocusTrap", "finishActivation", "then", "deactivateOptions", "options", "onDeactivate", "onPostDeactivate", "checkCanReturnFocus", "clearTimeout", "finishDeactivation", "pause", "pauseOptions", "unpause", "unpauseOptions", "updateContainerElements", "containerElements", "elementsAsArray", "Boolean", "Object", "defineProperties", "onPause", "onPostPause", "onUnpause", "onPostUnpause", "o", "_toPropertyKey", "t", "_isNativeReflectConstruct", "e", "_defineProperty", "_toPrimitive", "createFocusTrap", "isFocusable", "FocusTrap", "optionName", "deactivateTrap", "finishDeactivation", "callbackRef"]
}
